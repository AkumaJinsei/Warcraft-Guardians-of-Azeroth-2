steal_artifact_in_siege_effect = {
	# Save scopes for localization
	$LOCATION$ = { save_scope_as = SAISE_location }
	$ATTACKER$ = { save_scope_as = SAISE_attacker }
	$DEFENDER$ = { save_scope_as = SAISE_defender }
	$ARTIFACT$ = { save_scope_as = SAISE_artifact }

	scope:SAISE_artifact = {
		# Suppress generic notifications, as we will send custom ones
		set_variable = {
			name = suppress_artifact_notifications
			value = yes
			days = 1
		}
		if = {
			limit = {
				NOT = { has_variable = stolen_artifact }
			}
			set_variable = {
				name = stolen_artifact
				value = 1
			}
		}
		else = {
			change_variable = {
				name = stolen_artifact
				add = 1
			}
		}

		# Transfer the artifact to its new owner
		if = {
			limit = {
				has_variable = ai_to_ai_destroy_in_sieges
				scope:SAISE_attacker = {
					is_ai = yes
				}
				scope:SAISE_defender = {
					is_ai = yes
				}
			}
			destroy_artifact = this
		}
		else = {
			set_owner = {
				target = scope:SAISE_attacker
				history = {
					location = scope:SAISE_location
					actor = scope:SAISE_attacker
					recipient = scope:SAISE_defender
					type = taken_in_siege
				}
			}
			scope:SAISE_defender = { add_personal_artifact_claim = scope:SAISE_artifact }
			# Send notifications to the relevant parties
			scope:SAISE_defender = {
				send_interface_toast = {
					title = artifact_lost_toast
					left_icon = scope:SAISE_artifact
					right_icon = scope:SAISE_attacker
					if = {
						limit = { $IS_RAID$ = yes }
						custom_tooltip = artifact_lost_in_raid
					}
					else = {
						custom_tooltip = artifact_lost_in_siege
					}
				}
			}
			scope:SAISE_attacker = {
				send_interface_toast = {
					title = artifact_seized_toast
					left_icon = scope:SAISE_artifact
					right_icon = scope:SAISE_defender
					if = {
						limit = { $IS_RAID$ = yes }
						custom_tooltip = artifact_seized_in_raid
					}
					else = {
						custom_tooltip = artifact_seized_in_siege
					}
				}
				if = {
					limit = {
						NOT = { any_claimed_artifact = { this = scope:SAISE_artifact } }
					}
					scope:SAISE_artifact = {
						set_variable = {
							name = last_person_to_steal
							value = scope:SAISE_attacker
						}
					} 
				}
			}
		}
	}
}

damage_artifact_in_battle_effect = {
	# Warcraft
	if = {
		limit = { $ARTIFACT$ = { artifact_can_be_damaged_trigger = yes } }
		
		# Save scopes for localization
		$OWNER$ = {
			save_scope_as = DAIBE_owner
		}
		$OPPONENT$ = { save_scope_as = DAIBE_opponent }
		$LOCATION$ = { save_scope_as = DAIBE_location }
		$ARTIFACT$ = {
			save_scope_as = DAIBE_artifact 

			# Suppress generic notifications, as we will send custom ones
			set_variable = {
				name = suppress_artifact_notifications
				value = yes
				days = 1
			}

			set_variable = {
				name = DAIBE_damage
				value = $DURABILITY_LOSS$
				days = 1
			}

			# Damage the artifact by the specified amount
			add_durability = {
				value = 0
				subtract = var:DAIBE_damage
			}

			if = {
				# If the artifact has no durability left, destroy it now.
				limit = {
					artifact_durability <= 0
				}
				destroy_artifact = this
			}
		}

		# Send notifications to the relevant party
		$OWNER$ = {
			# Send the toast
			send_interface_toast = {
				title = artifact_damaged_toast
				left_icon = scope:DAIBE_artifact
				right_icon = scope:DAIBE_opponent
				if = {
					limit = { $IS_DUEL$ = yes }
					custom_tooltip = artifact_damaged_in_duel
				}
				else = {
					custom_tooltip = artifact_damaged_in_siege
				}
			}
		}
	}
}

flag_as_trash_artifact = {
	set_variable = {
		name = ai_to_ai_destroy_in_sieges
		value = yes
	}
}

flag_as_unwanted_artifact = {
	set_variable = {
		name = unwanted_artifact
		value = yes
	}
}

flag_as_cursed_artifact = {
	set_variable = {
		name = cursed_artifact
		value = yes
	}
}

#For use with HornedMythicalCreature / call this effect (set_up_horned_mythical_creature_effect = yes) in the line before creating the artifact 
#Use this in the artifact's name/description in the loc-file [ROOT.Char.Custom('HornedMythicalCreature')]
#Remember to clear the var:horned_mythical_creature in your after = { ... }
set_up_horned_mythical_creature_effect = {
	random_list = {
		# Warcraft
		50 = {
			trigger = { capital_province = { warcraft_rhino_region_trigger = yes } }
			set_variable = {
				name = horned_mythical_creature
				value = flag:rhino
			}
		}
		50 = {
			set_variable = {
				name = horned_mythical_creature
				value = flag:unicorn
			}
		}
		# Too common
		# 50 = {
			# trigger = { capital_province = { raptor_region_trigger = yes } }
			# set_variable = {
				# name = horned_mythical_creature
				# value = flag:raptor
			# }
		# }
		50 = {
			trigger = { capital_province = { direhorn_region_trigger = yes } }
			set_variable = {
				name = horned_mythical_creature
				value = flag:direhorn
			}
		}
		50 = {
			trigger = { capital_province = { stegodon_region_trigger = yes } }
			set_variable = {
				name = horned_mythical_creature
				value = flag:stegodon
			}
		}
		# Too common
		# 50 = {
			# trigger = { capital_province = { kodo_region_trigger = yes } }
			# set_variable = {
				# name = horned_mythical_creature
				# value = flag:kodo
			# }
		# }
		50 = {
			trigger = { capital_province = { thunder_lizard_region_trigger = yes } }
			set_variable = {
				name = horned_mythical_creature
				value = flag:thunder_lizard
			}
		}
	}
}

#For use with RegionalMythicalCreature / call this effect (set_up_regional_mythical_creature_effect = yes) in the line before creating the artifact 
#Use this in the artifact's name/description in the loc-file [ROOT.Char.Custom('RegionalMythicalCreature')] /and/ [ROOT.Char.Custom('RegionalMythicalCreatureLower')]
#Remember to clear the var:regional_mythical_creature_trinket in your after = { ... }
set_up_regional_mythical_creature_effect = {
	if = {
		limit = { NOT = { exists = var:regional_mythical_creature_trinket } }
		random_list = {
			50 = {
				trigger = { capital_province = { kraken_region_trigger = yes } }
				set_variable = {
					name = regional_mythical_creature_trinket
					value = flag:kraken
				}
			}
			50 = {
				trigger = { capital_province = { whale_shark_region_trigger = yes } }
				set_variable = {
					name = regional_mythical_creature_trinket
					value = flag:whale_shark
				}
			}
			50 = {
				trigger = { capital_province = { wolf_eel_region_trigger = yes } }
				set_variable = {
					name = regional_mythical_creature_trinket
					value = flag:wolf_eel
				}
			}
			50 = {
				trigger = { capital_province = { riverbeast_region_trigger = yes } }
				set_variable = {
					name = regional_mythical_creature_trinket
					value = flag:riverbeast
				}
			}
			50 = {
				trigger = { capital_province = { mammoth_region_trigger = yes } }
				set_variable = {
					name = regional_mythical_creature_trinket
					value = flag:mammoth
				}
			}
			50 = {
				trigger = { capital_province = { basilisk_region_trigger = yes } }
				set_variable = {
					name = regional_mythical_creature_trinket
					value = flag:basilisk
				}
			}
			50 = {
				trigger = { capital_province = { brutosaur_region_trigger = yes } }
				set_variable = {
					name = regional_mythical_creature_trinket
					value = flag:brutosaur
				}
			}
			50 = {
				trigger = { capital_province = { devilsaur_region_trigger = yes } }
				set_variable = {
					name = regional_mythical_creature_trinket
					value = flag:devilsaur
				}
			}
			50 = {
				trigger = { capital_province = { cloud_serpent_region_trigger = yes } }
				set_variable = {
					name = regional_mythical_creature_trinket
					value = flag:cloud_serpent
				}
			}
			50 = {
				trigger = { capital_province = { hydra_region_trigger = yes } }
				set_variable = {
					name = regional_mythical_creature_trinket
					value = flag:hydra
				}
			}
			50 = {
				trigger = { capital_province = { jormungar_region_trigger = yes } }
				set_variable = {
					name = regional_mythical_creature_trinket
					value = flag:jormungar
				}
			}
			50 = {
				trigger = { capital_province = { chimaera_region_trigger = yes } }
				set_variable = {
					name = regional_mythical_creature_trinket
					value = flag:chimaera
				}
			}
			
			#Fallback
			1 = {
				set_variable = {
					name = regional_mythical_creature_trinket
					value = flag:dragon
				}
			}
		}
	}
}

#For use with trinket looks / call this effect (set_up_trinket_adjective_effect = yes) in the line before creating the trinket
#Use this in the trinket's name/description in the loc-file [ROOT.Char.Custom('TrinketLookAdjective')] /and/ [ROOT.Char.Custom('TrinketLookAdverbFollowup')]
#Remember to clear the var:trinket_adjective_followup in your after = { ... }
set_up_trinket_adjective_effect = {
	random_list = {
		50 = {
			set_variable = {
				name = trinket_adjective_followup
				value = flag:adorned
			}
		}
		50 = {
			set_variable = {
				name = trinket_adjective_followup
				value = flag:decorated
			}
		}
		50 = {
			set_variable = {
				name = trinket_adjective_followup
				value = flag:embellished
			}
		}
		50 = {
			set_variable = {
				name = trinket_adjective_followup
				value = flag:ornamented
			}
		}

	}
}

# Grant claims on familial banners
grant_banner_house_claim_effect = {
	save_scope_as = familial_banner
	hidden_effect = {
		if = { # Dynasty banner not owned or claimed by all child house's already
			limit = {
				exists = var:banner_dynasty
				var:banner_dynasty = {
					any_dynasty_member = {
						this = house.house_head
						house = { artifact_house_not_owns_or_claims_trigger = yes } # House not owns or claims already
					}
				}
			}
			var:banner_dynasty = {
				every_dynasty_member = {
					limit = {
						this = house.house_head
						house = { artifact_house_not_owns_or_claims_trigger = yes } # House not owns or claims already
					}
					house = { add_house_artifact_claim = scope:familial_banner }
				}
			}
		}
		else_if = { # House banner not owned or claimed by creating house already
			limit = {
				exists = var:banner_house
				var:banner_house = { artifact_house_not_owns_or_claims_trigger = yes } # House not owns or claims already
			}
			var:banner_house = { add_house_artifact_claim = scope:familial_banner }
		}
	}
}
